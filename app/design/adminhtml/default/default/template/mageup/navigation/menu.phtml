<?php
/**
 * MageUp Navigation module
 *
 * @category    design
 * @package     adminhtml_default
 * @copyright   Copyright (c) 2013 MageUp (http://www.mageup.com)
 * @license     http://www.gnu.org/licenses/gpl.html  Open Source GPL 3.0 license
 */
/**
 * @var $this MageUp_Navigation_Block_Adminhtml_Menu
 */
?>
<h1>Drag & Drop Categories and CMS pages to create your own unique Navigation</h1>
<div id="tree-container"></div>
<style type="text/css">
    .x-panel {
        float: left;
        margin: 20px;
    }
    #tree-container {overflow:hidden;}
    button:hover {background: none;}
</style>
<script type="text/javascript">
    Ext.require(['*']);
    Ext.QuickTips.init();

    Ext.onReady(function() {
        var store = Ext.create('Ext.data.TreeStore', {
            proxy: {
                type: 'ajax',
                extraParams:{form_key: FORM_KEY},
                api: {
                    read: '<?php echo $this->getMenuItemsUrl()?>',
                    create: '<?php echo $this->getSyncAddUpdateUrl()?>',
                    update: '<?php echo $this->getSyncAddUpdateUrl()?>',
                    destroy: '<?php echo $this->getSyncDeleteUrl()?>'
                }
            },
            folderSort: true,
            autoSync: true,
            root: {
                text: 'Menu',
                id: '0',
                expanded: true
            },
            fields: ['text', 'url', 'class', 'category_id', 'page_id', 'index', 'url_editable', 'depth'],
            onCreateRecords: function(records, operation, success) {
                if (!success) {
                    Ext.Msg.alert("Sync Failed",
                            operation.request.scope.reader.jsonData["message"]
                                    + "<br/>"
                                    + "<?php echo $this->__('Try to use manual Sync button.')?>"
                    );
                }
            },
            onUpdateRecords: function(records, operation, success) {
                if (!success) {
                    Ext.Msg.alert("Sync Failed",
                            operation.request.scope.reader.jsonData["message"]
                                    + "<br/>"
                                    + "<?php echo $this->__('Try to use manual Sync button.')?>"
                    );
                } else {
                    var i=0;
                    var shouldSync = false;
                    records.each(function(item) {
                        // assign id
                        var oldId = item.data.id;
                        var newId = operation.getResultSet().records[i].data.id;
                        if (oldId == null || oldId != newId) {
                            item.id = newId;
                            item.set('id', newId);
                        }
                        // address unattended child nodes
                        if (item.get('parentId') == null) {
                            item.set('parentId', item.parentNode.get('id'));
                            item.dirty = true;
                            shouldSync = true;
                        }
                        i++;
                    });
                    if (shouldSync)
                        store.sync();

                }
            },
            onDestroyRecords: function(records, operation, success) {
                if (!success) {
                    store.rejectChanges();
                    Ext.Msg.alert("Sync Failed",
                            operation.request.scope.reader.jsonData["message"]
                    );
                } else {
                    // on success remove removed array
                    store.removed = [];
                }
            }
//            ,
//            listeners: {
//                beforesync: function(options, eOpts) {
//                    //
//                }
//            }
        });

        var tree = Ext.create('Ext.tree.Panel', {
            store: store,
            viewConfig: {
                plugins: {
                    ptype: 'treeviewdragdrop'
                }
            },
            renderTo: 'tree-container',
            rootVisible: true,
            height: 300,
            width: 500,
            title: 'Menu items',
            useArrows: true,
            selType: 'cellmodel',
            plugins: [
                Ext.create('Ext.grid.plugin.CellEditing', {
                    clicksToEdit: 2,
                    listeners: {
                        'beforeedit': function(editor, e) {
                            if (!e.record.get('url_editable') && (e.column.dataIndex == 'url')) {
                                e.cancel = true;
                            }
                        }
//                        ,
//                        'edit': function(e) {
//
//                        }
                    }
                })
            ],
            columns:[
                {
                    xtype: 'treecolumn',
                    text: 'Name',
                    dataIndex: 'text',
                    flex: 1,
                    sortable: false,
                    editor: 'textfield'
                } , {
                    text: 'Key',
                    dataIndex: 'url',
                    flex: 1,
                    sortable: false,
                    editor: 'textfield'
                } , {
                    text: 'Custom Class',
                    dataIndex: 'class',
                    flex: 1,
                    sortable: false,
                    editor: 'textfield'
                } , {
                    xtype: 'actioncolumn',
                    width:30,
                    sortable: false,
                    items: [{
                        icon: '<?php echo $this->getSkinUrl('images/cancel_icon.gif')?>',
                        tooltip: 'Remove Row',
                        handler: function(grid, rowIndex, colIndex) {
                            Ext.Msg.confirm('confirm', 'Are you sure you want to remove this row?', function(btn){
                                if (btn !== 'yes')
                                    return;
                                grid.getStore().getAt(rowIndex).remove();
                            });
                        }
                    }]
                }
            ],
            dockedItems: [{
                xtype: 'toolbar',
                items: [{
                    text: 'Expand All',
                    handler: function(){
                        tree.expandAll();
                    }
                }, {
                    text: 'Collapse All',
                    handler: function(){
                        tree.collapseAll();
                    }
                }, {
                    text: 'Add Record',
                    handler: function(){
                        if (tree.getSelectionModel().selected.length) {
                            tree.getSelectionModel().selected.items[0].appendChild({text: 'New node', url_editable:true});
                            tree.getSelectionModel().selected.items[0].expand();
                        } else {
                            tree.getRootNode().appendChild({text: 'New node', url_editable:true});
                        }
                    }
                }, {
                    text: 'Manual Sync',
                    handler: function(){
                        tree.getStore().sync({
                            success: function(batch) {
                                Ext.Msg.alert('Success!', 'Changes saved successfully.');
                            },
                            failure: function(batch) {
                                Ext.Msg.alert("Failed", batch.operations[0].request.scope.reader.jsonData["message"]);
                            }
                        });
                    }
                }
//                    , {
//                    text: 'Remove',
//                    handler: function(){
//                        var record = tree.getSelectionModel().getSelection()[0];
//                        if (typeof record != 'undefined') {
//                            Ext.Msg.confirm('confirm', 'Are you sure you want to remove this row?', function(btn){
//                                if (btn !== 'yes')
//                                    return;
//                                record.remove(true);
//                            });
//                        } else {
//                            Ext.Msg.alert('Alert', 'Please select record');
//                        }
//                    }
//                }
                ]
            }]
        });

        var store2 = Ext.create('Ext.data.TreeStore', {
            proxy: {
                type: 'ajax',
                extraParams:{form_key: FORM_KEY},
                url: '<?php echo $this->getLoadTreeUrl()?>',
                idParam: 'category_id'
            },
            root: {
                text: 'Root',
                // TODO: fix hardcoded category id
                category_id: 1,
                expanded: true
            },
            idParam: 'category_id',
            folderSort: true,
            fields: ['text', 'url', 'category_id', 'index', 'id', 'depth', 'class'],
            listeners:  {
                beforeload: function(store, operation) {
                    operation.params.category_id = operation.node.data.category_id;
                }
            }
        });

        var tree2 = Ext.create('Ext.tree.Panel', {
            store: store2,
            viewConfig: {
                plugins: {
                    ptype: 'treeviewdragdrop'
                }
            },
            renderTo: 'tree-container',
            height: 300,
            width: 350,
            title: 'Categories',
            useArrows: true,
            rootVisible: false,
            dockedItems: [{
                xtype: 'toolbar',
                items: [{
                    text: 'Expand All',
                    handler: function(){
                        tree2.expandAll();
                    }
                }, {
                    text: 'Collapse All',
                    handler: function(){
                        tree2.collapseAll();
                    }
                }, {
                    text: 'Reload',
                    handler: function(){
                        tree2.getStore().load();
                    }
                }]
            }]
        });

        var store3 = Ext.create('Ext.data.TreeStore', {
            proxy: {
                type: 'ajax',
                extraParams:{form_key: FORM_KEY},
                url: '<?php echo $this->getLoadCmsUrl()?>'
            },
            root: {
                text: 'Root',
                expanded: true
            },
            folderSort: true,
            sorters: [{
                property: 'text',
                direction: 'ASC'
            }],
            fields: ['text', 'url', 'page_id', 'index', 'id', 'depth', 'class']
        });

        var tree3 = Ext.create('Ext.tree.Panel', {
            store: store3,
            viewConfig: {
                plugins: {
                    ptype: 'treeviewdragdrop'
                }
            },
            rootVisible: false,
            renderTo: 'tree-container',
            height: 300,
            width: 300,
            title: 'CMS Pages',
            useArrows: true,
            dockedItems: [{
                xtype: 'toolbar',
                items: [{
                    text: 'Reload',
                    handler: function(){
                        tree3.getStore().load();
                    }
                }]
            }]
        });
    });
    Ext.override(Ext.data.TreeStore, {
        rejectChanges: function() {
            var me = this;

            // re-add removed records
            Ext.each(me.removed, function(rec) {
                rec.join(me);
                var parent = me.getNodeById(rec.data.parentId);
                if (parent != null)
                    parent.insertChild(rec.data.index, rec);
            });
            me.removed = [];

            // revert dirty records and trash newly added records ('phantoms')
            me.getModifiedRecords().each(function(rec) {
                if (rec.dirty) {
                    rec.reject();
                }
                if (rec.phantom) {
                    rec.remove(true);
                }
            });

            me.fireEvent('datachanged', me);
        }
    });
</script>